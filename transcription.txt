с разными стандартами, но главное, что те четыре, о которых мы поговорили, они, как правило, стабильны, а вот все, что выше, это какие уже дальше настройки. На самом деле, нам останется поговорить еще про всякие интересные обычные штучки. протокол управления Сирией, все всякие айсинги, потом посмотрим. Посмотрим на протоколы тоннелирования графика для того, чтобы не создаваться тоннели между разными местами. Посмотрим чуть-чуть на прикладные протоколы по обзору и технологии. Теперь внутрь немножко заглянем, хотя мне хочется поговорить с Николаем Николаевичем. мы все равно попробуем даже посмотреть какие-то наборы протоколов мы с вами возьмем и поговорим, попробуем понастраивать минимум серверные все ключевые решения о чем мы сегодня говорим очень важно, еще раз на секунду очень важно осознать, что чем ниже мы находимся в этой всей структуре Скажем так, целостности передачи данных, а чем дольше мы находимся, тем больше мы запариваемся над тем, что все ли дошло, все ли корректно пришло, все пакеты проверяем и так далее. И главная задача вакторанспорта в новом году Мы выяснили IP-адрес, нашли компьютер, который нам нужен. Теперь наша задача выяснить, о чем мы от этого компьютера хотим. Какую конкретную услугу мы хотим сетевую получить. Транспортный уровень — это передача данных между конкретными хостами. Условно, это уже очень знакомая нам схема, мы пытаемся при помощи транспортного уровня определить, какому именно предложению предназначен пакет, собственно, адресация. И мы еще можем выбирать, какую мы хотим доставку гарантированную, в которой точно все будет доставлено, проверено. на транспортном мы можем гарантировать порядок следования пакетов друг за другом потому что с сетевым умовами, когда мы отправляем пакет между протоколами мы с вами заслали пакет, по какому маршруту он пройдет два пакета, которые друг за другом послали по одному маршруту проедутся или по разному, чуть ли не разные страны, двух выбранных кто из них раньше придет, неважно протоколы занимаются тем, что собирают пакеты в нужном порядке, чтобы получить то, что у нас получилось. На самом деле протоколов реально используемых на транспортном уровне всего два. И если посмотреть на картинку про то, как мы проходим все по уровню. Сверху картинка в идеальном мире этой модели оси, он скрывает от нас детали реализации сетевого подключения и вот когда мы с вами чисто потребительское чувство даже если для разработчиков тоже все время обращаемся к кому-то серверу и получаем ответ к нему на этот запрос так далее нам наплевать как эти пакеты двигаются наша задача убедиться мы хотим попасть не андреса не знаю я по своему серверу каком-то условно там отправляем пакет и Для нас с вами классно то, что мы не понимаем, мы можем не догадываться, как это сделано на уровне сетевого, ниже. Для нас это, по сути, практически интернет. От одного сервера к клиенту, к клиенту к серверу. И мы это рассматриваем как сплошное подключение. Вот эта схема, пунктирчиком обозначена для нас наше ощущение того, как это работает. Мы с вами можем даже не на этой сети уровня ниже посмотреть, Мы с вами понимаем теперь, что все эти пакеты, инкапсулированные, спрятанные друг на друга, каждый раз на каждом сетевом устройстве распаковываются. Пакеты CP, спрошили, увидели, что внутри. IP протокол, супер. IP уже спрошили, посмотрели, что дальше. Канальный уровень, спрошили, 0.1 превратили, 0.1. Проехали следующий сетевой устройство. Все это по степу тоже пробежалось, проверил, посмотрел. мы начинаем это разбираться только в тот момент, когда что-то не работает когда в какой-нибудь сети какие-то пакеты теряются какие-то пинги увеличиваются тогда приходится нам с вами закатать рукава, идти и проверить на транспортном уровне все в порядке с сетевым пингом проверили все хорошо проверили сеть на канальном уровне посмотрели какие еще бегают пакеты не сразу бежать в провода проверять, что-то случилось, не случилось, а пройтись по уровням, реально проверить и выяснить, на каком этапе вас решили. Короче, для нас, разработчиков, пока все хорошо. Это просто тональность. От одного, как и от другого реальности все сложно. Теперь про адреса. и в разработчикском понимании. Эта штуковина, которая ставится после значка, после IP-адреса в большинстве приложений, иногда не пишут его. Вот это число, соответственно, от 1 до 65, вопрос знатокам. Задачка для семиплазников. Почему 65,5? То есть, очевидно, что 16-бит вводится на порт. в пакете стандарта TCP. Каждое приложение, которое реализует сетевой стекер, взаимодействует с каким-то... у него всегда есть какой-то свой порт, на котором он работает, и по которому он принимает и передает этот же пакет. Соответственно, иногда вот эти порты не пишут. Иногда они как будто бы автоматически вставляются. Но мы с вами в принципе этого не делаем, когда пользуемся каким-то всемирной паутиной, например. Мы не пишем с вами что-то в таком духе, например, точка 80. А 80 порт-эксперты знают рационно за порт, как каждый человек. Конечно, для HTTP, ну или, соответственно, если там 443 эксперты для HTTPS. У каждого протокола есть свои какие-то порты, у каждого приложения. Всегда ли они зарезервированы каким-то образом? Ну, по-разному бывает. Вообще, есть RFC. Вообще, слово RFC вам наверняка встречалось уже периодически. Это такая договоренность, или request for comments. Когда организация, некоторые определенные, публикуют некоторые договоренности, это не совсем стандартный протокол какой-то. образом систематизировать определенные подходы, приемы, так чтобы разные разработчики не портили жизнь друг другу. И вот RFC обычно какие-то спецификации, иногда стандарты, но как правило все это связано с работой именно интернета. Практически для любого Для языка и библиотек бывает РФС и еще несколько разных штук. Вот в РФС 6335, который относится к описанию транспортного уровня, приложений для разных каких-то сервисов. Есть еще вот эти вот регистр quotes, достаточно большой диапазон, самый большой. Это такие, которые можно зарегистрировать для своего приложения и подать в эту базу данных чтобы все разработчики, например, знали условно какой-нибудь server.dks.com вот он должен быть в таком порту постарайтесь все остальные, пожалуйста, не используют этот порт потому что ну чтобы не было конфликтов и так далее и есть еще dynamic ports и private ports они используются для отправки, например, пакетов и получения в каком-то динамическом режиме или иногда еще для перенаправления портов, тоже сейчас посмотрим. Есть такая организация IANA, Internet Assigned Numbers Authority, которая по этому адресочку хранит, по сути, вот эти user-registered и well-known порты. Тут можно много всякого найти и можно туда подать был зарезервирован, но никто вам не гарантирует, что другие не смогут его использовать. Мы можем переозначать парты в системе как наше душе угодно, даже системы well-known парты. Но вот здесь смотрите, много всякого разного. Это начало списка, где парты 20, 21, 22. Хорошо нам известно, потому что эти типы, например, 20 и 21 используют, ssh, которым мы включаемся, 22. и вообще неплохо было бы, наверное, знать какие-то типичные номера портов, но это так нас облегчает иногда жизнь в каком-то исследовании, когда что-то не так идет, и настраивать, и так далее. Есть ли выкрутные тренды? Хорошее понимание того, за какой цифрой раскрывается какой порт. Я что-то вот забыл в этом году. Мы с вами столкнулись с этим или нет? А, мы еще не столкнулись, потому что это будет на эхо-сетях. Это будет на приходных в следующем семестре. Вот в герцена очень интересны настройки фаерболла. Фаерболл, мы с вами помним, это как раз по сути устройство, но и программная реализация, они не предназначены для выхода за пределы сети или для попадания, например, внутрь какой-то сети. Так вот, в Гербол-Герцена настроено все любопытно. Например, закрыты все порты, кроме условного 80-го, 44-го, может, что-то еще есть, но это надо прямо поговорить. И, например, из Герцена долгое время, надо поверить, может, что-то менялось в политике, Нельзя было подключиться к своему SSH-серверу по протоколу по борту номер 22. Все пакеты, которые выходят из гельса напротив гельса на борту 22, просто дробь им делали, их отбрасывали. и приходилось перенаставливать свои сервера, чтобы подключиться, например, да? Ну, либо, как теперь это модно делать, чтобы обходить подобное ограничение, использовать какой-нибудь свой программный тоннель, чтобы вытеснять, и так далее. И второй момент, связанный с номерами и их известностью. Бывает тоже интересно, поскольку в программах часто бывают уязвимости различные. Ну, мы все не идеально, невозможно написать программу, Иногда может оказаться все эти истории дурацкий символ, если помните лет 5, 6, 7, 10 назад, где на уровне архитектуры процессора находили такие баги, которые позволяли взламывать компьютер, работающий на этом процессоре, используя хитрые комбинации уязвимостей. Например, тот же SSH, там было несколько громких уязвимостей, которые в комбо с этим процессором позволяли подключиться и делать что угодно с вашим компьютером. Дистрибутивные линексы тоже неплохо бы обновлять. Именно потому, что очень много выязвимостей в последнее время находят. А ИИ, как вы понимаете, в последнее время только ускоряет подобные процессы. Засовывают в библиотеку, анализируют и что-то необычное, совершенно нестандартное находят. Плюс есть куча инструментов, которые анализируют ваш код. Это программа анализатор кода на C и C++. Они могли дать баги какие-то, еще что-то. Можно было кучу всего найти. И, короче, для того, чтобы... Да, и в сети огромное количество сканеров работает. Проходится по всем абсолютно хостам, всем компьютерам, которые в интернет смотрят, так иначе, и сканируют порты, которые открыты на этих компьютерах. И в большинстве случаев, если мы не настраиваемся, специальным образом свои firewall, чтобы ограничивать доступ. Может быть, все, что было, поставили к вам чисто. но он там уже есть и работает. И может быть вам не нужно было светить этим квартом наружу, надо его закрыть, выключить четко. Или, например, чтобы сбить с толку, например, те, кто сканирует тут, сканируют по номерам кварты, можно сделать нестандартное кодовое подключение к SSH. Это такая защита от дурака на тупых роботах, которые собираются в компьютерах и SSH открыть, чтобы потом выключить. Пожальте, чтобы договориться. Какой протокол? Какая это вся протокола? И Север сам по себе расскажет, какой у него версия состояния. Короче, все типоты, все там записаны. В идеале бы неплохо. можно туда заявку подать. Но в последнее время у нас такой тренд, что если мы создаем API, то чаще всего они работают сегодня на протокол, который чуть повыше будет, than application. И самый популярный сегодня протокол транспортный у нас вообще-то так называемый HTTP. И большинство приложений, которые сегодня работают, не используют в чистом виде HTTP, как мы говорим, а скорее используют TCP для транспорта. Поэтому там, скорее всего, вопрос по 80443, Ну давайте вот так вот быстренько взглядом окинем какие-то типичные, самые попсовые, well-known порты. Я думаю, что многое вам из этого знакомо. Первые три историки я уже даже сказал. А есть еще интересный СМТП, добавляясь. Проблема СМТП в том, что он один из первых протоколов вообще, который был, в принципе, который думал. И он, ну как все, там, в интернет-сетях 70-х, Но сегодня не принято по открытым протоколам отправлять такие данные. Надо будет, конечно, каким-то образом душу вправить. Поэтому чистый 25-й порт практически нигде сегодня не используется в публичном интернете, потому что небезопасно. Поэтому используют обычно SMTP, которые покрыты сертификатами. DNS, о котором мы еще не говорили, но надо будет поговорить, настроить свою систему, это уже 53. HCP, автоматический настройщик, про него мы чуть-чуть сперва поговорили. В общем, всякие разные, много волновых вопросов. И дальше, когда мы получили некоторые транспорты на транспортном уровне, договорились о протоколах, дальше таким образом приложения, которые работают в нашем компьютере, должны эти данные, собственно говоря, получить. И внутри операционных систем, как правило, существует такое слово, которое называется SOC. И это, по сути, такой интерфейс для взаимодействия. И, соответственно, когда вы в приложении что-то сетевое делаете, по сути открывается вот этот системный интерфейс сокетов и дальше уже происходит такой дизайнеризм. Самый популярный протокол, наверное, называется CP, Transmission Control Protocol, тут написано, что это недлинный номерочек, один из первых стандартов. разнести их по разные стороны, противоположные. Две принципиально разных задач. И те продукты, которых они используются, у них разные цели. в том, что он перед тем, как начинает передавать данные, делает вот этот самый хэндшейк. Мы перед тем, как непосредственно передать данные, все равно устанавливаем соединение и договариваемся, какие-то протоколы, какие-то версии, где разная тонкость есть. На самом деле, сети достаточно в общем, сложная штука, тем, кто захочет поглубже, вы это сами почитаете, но для нас важно понять вот еще, что соединение осуществляется, если вдруг пакет не дошел, TCP нумерует последовательность пакетов, ему важно, чтобы они дошли все, если вдруг какого-то пакета не хватает, если вдруг одинаковые получили пакеты, такое бывает, то погибиваем и устраняем дубликат самое важное, что на сегодняшний день я могу конечно немного лукавить и собрать но в 99% случаев операционная система сегодня поддерживает протоколы сети прямо на уровне гидра мы можем взять любую какую-нибудь Если вы, как я не знаю, какой-нибудь датчик открывания двери, он работает по Зигню, например, там тоже вполне себе будет TCP, маленькая игрушечка со своей микросети. там тоже будет совершенно, скорее всего, вероятно, поддерживать сети и можно на это рассчитывать. Какие-нибудь, я не знаю, любые гаджеты, везде, скорее всего. Значит, самое главное еще, это гарантирует доставку, целостность и уведомляет передающую сторону, что все хорошо, все дошло. То есть, если мы отправили пакет, все нам в конце скажут, все супер, все дошло, все данные получили, можно расслабиться, передатись там дальше. Но чувствуется такая забота и поддержка, что ничего не потерялось, все дошло, контролировать целостность, вот наконец-то на этом уровне все это и происходит. Но, как вы понимаете, второй протокол EDP действует совершенно по-другому. Ему, в принципе, на привык. Дошли данные, не нашли. Но мы с вами сталкиваемся с реальностью, с тем, которую комнадзор пытается контролировать. В общем-то, контролирует доступность разных инструкций. Влезть внутрь пакетов на прикладном уровне сложно. Очень сложно, невозможно разобрать эти самые HTTPS для того, чтобы он согласился. Ну, тоже сложно теперь понимать, куда, кому, где попали. С учетом того, что можно всякие разные хитрые адресации делать, сложно. И что делает на самом деле Располнадзор в большинстве случаев? Ну, они в том числе на основе протокола дисциплин понимают, к какому хостелу вы отправили... Опять-таки, я сейчас упрощаю, потому что или те, кто анализировал это очень внимательно. Что они делают? Вот как не запретить доступ, а например замедлить, что делали с Facebook или с Twitter некоторое время назад. Вот как замедлить? Это прям непросто. Ну что вы, хотите придерживать у себя пакетик некоторое время, а потом его отправлять? Ну это можно просто, знаете ли, с ума сойти с теми объемами трафика, которые происходят. Что он сам делает? они, в зависимости от того, насколько хотят замедлить ресурс, рандомно кидают, например, половину пакета замедлить в два раза видишь, что идет пакет из твиттера один передал, второй выкинул, дробнул что сделает TCP в какой-то момент, когда дает половину пакета? Но есть и неприятные последствия. Из-за того, что мы делаем дорогу пакетов. Обычно это делается где? Это делается не на трансграничном переходе на границу с Россией. Это делается у провайдера, у каждого. Каждый оператор обязан поставить себе коробочку, которая трафик анализирует. У кого-то это коробочка, у кого-то коробочка, а у кого-то это целое помещение. Может оказаться сервисное, какая-то стойкая. Твиттер или еще кого-то, они замедляют пакеты. Пакет все равно прошелся по всей сети и дрогнулся почти в конце уже, перед последними или до нас. То есть эти пакеты все равно гоняются, они нагружают сеть, но мы их не получаем. В общем TCP, из-за его заботы о том, что надо еще раз запросить, мы, с одной стороны, вроде бы как не можем попасть в какой-нибудь YouTube или Twitter, но медленнее, потому что он вынужден перезапрашивать пакеты, Есть вероятность, например, что предпакет вообще никогда не дойдет, если он лично будет дороготься случайно. Как бы такая история. Что делает TCP? Он старается организовать надежную передачу, вот такая есть FPS, как понятие. Самое главное, что весь поток информации, который ходит через сокет, Камера смартфона сняла, картинку кодеком переварила, превратила в видеопоток, и все. Дальше через сокет на сетевую карту, по сути, передается поток этих пальцев. Что делает, по сути, уровень транспортной системы? Она нарезает на сегменты все, что у нас с вами есть. И размер этих сегментов, и последовательно, если она может быть гибкой, она может настраиваться. ну, скажем, ну, это совершенно сложно проще только разве что IPv6 был у нас и MAC, наверное, тоже простой был но тут все та же самая история нам 32 бита отдают на, соответственно, заголовок, да? и, соответственно, нет, 32 бита на заголовок маловато это, наверное, какие-нибудь 32 бита типа вот эти вот Самое главное, что есть в этом пакете, в структуре этого сегмента. Здесь это называется сегмент. У нас есть sourceport, то есть порт источника. Есть такое заблуждение, что порт важен только для тех, кто получает информацию. мы запускаем браузер, он вынужден отправить запрос через сеть к серверу, но у него тоже должно быть место, куда придет ответ. Вот те самые динамические порты, которые у нас были в том сегменте. Есть некоторый номер подтверждения, он используется в разных ситуациях, чтобы, соответственно, например, пакет обратно идет и говорит передатчику, что да, супер, все пришло, все в порядке, передача закончена. А вот дальше идут интересные штуки, ну, например, сумма знакомая нам, какой-то способ приоритизации, типа указатель важности, но есть еще одна заголовка для этого есть размерах на виду стать то как много или как мало будет передаваться данных в каждом сегменте этим всем можно увидеть что на предыдущем уровне сети что-то пойдет не так. Wi-Fi не споет, потеряется пакет. Чем больше пакет, тем быстрее мы можем передавать информацию. размера пакетов а если есть техника не буду сейчас особо останавливаться на них самое смешное, что многие из них на самом деле уже не используются в типе указателей важности htk это, соответственно, acknowledgement это подтверждение, что сегмент получен обрыв соединения можно вызвать принудительный, если он какой-то большой пакет всякие разные плагистики т.е. он в любые стороны передает информацию и ожидает связи когда нам кажется, что пакетик сегмента передается, на самом деле это целая серия действий Передатчик и получатель готовы передавать данные. Это синхронизация один. И, соответственно, потом ответ. Синхронизация плюс KCK. KCK соответственно, что мы подтвердили, готовы, можем. Клиент запросил сервера и ответил, что да, супер, я готов, сейчас полетит все. тогда подтверждаю, что я хочу получить какие-то данные. И сервер уже в ответ это все отправляет. Но во всем этом перед передачей они договариваются о номерах заподобоков, о параметрах, размерах сегментов и так далее. И в конце еще после всего этого нужно отправить парочку как раз вот такая есть картиночка с подтверждением сегмент данных передали подтвердили все хорошо это правильно еще сегмент данных подтвердили что все хорошо отправили еще сегмент данных подтвердили что хорошо и так если только сегмент данных не мы отправили ответа не получили это правая картинка то север некоторое время ждет этого пакета окно что Да, он получил. Если не дождался, тупо отправляет пакет еще раз. Если он слишком мало ждал, слишком слабый лендовый канал, а все-таки пришло подтверждение, такое может быть. Ну, просто потом на клиенте дубликат не звуки. В общем, этот тимпон постоянно продолжается. Туда-сюда, туда-сюда они передают все эти пакеты. И далее, соответственно, важный момент, что они еще и сообщают друг другу, чего они ждут. может быть, ну как правило, там просто указывается номер байка, начальник, да, на который разбиты все данные, и соответственно сегменты этими номерами байка. Что-то получил, что-то не получил, да, вот это все подтверждение постоянно происходит. Сервер снова ждет, снова отправляет. Ну, в общем и так. Я думаю, эта схема понятна и проста, правда? TCP, его главная фишка, что он все подтверждает. Теперь, тоже одна из первых, так сказать, 1 из первых 768. Но на фоне того, что сейчас там многотысячная мира, это в общем 1 из первых. Данные развивают здесь, ну как они называют, не на сегменты, а вот называем датограммы. Самое главное, никакого хендшейка. Как говорится, отправил и счастлив. Получили там, не получили, поддерживая такую вещь, протокол, не поддерживая, наклевать. В общем, ему не плевать. определить, к какому приложению соответствует дата, какой порт, написаться и все это. А во-вторых, действительно, для того, чтобы сделать это реально очень быстро. Кто-то может предложить какие-нибудь задачи, где нам не страшна потеря информации, и было бы круто быстро. Да, это типичная передача видео. Даже если мы из 60 кадров в минуту потеряем 2 динамики в минуту, в секунду, Если вдруг кадр номер 44 и кадр номер 42 поменяются не станет, мы за секунду вообще ничего не поймем. Какая разница? В каких системах видеонаблюдения? В наших чатиках, в телеграме, в зуме и прочей штуке. Там используются видики. Почему? Потому что наплевать. Он не доставился, не доставился. Но мы все равно целую стандартную инфраструктуру. мы с вами меньше нагружаем сеть. Видеотрафик сам на себя нагружает сеть намного сильнее, чем остальные виды, например, трафика. Но мы еще и снижаем эту всю штуку тем, что... Посмотрите, какая прекрасная структура у протокола UDP. Но это просто какое-то счастье, правда? но все равно можно проверить пакет, целостный он доставился можно его отбросить, если он не соответствует через сумму и не использовать ну и да, и все, боже, вот хочется на секундочку или вот это, да? ну как бы кошмар! все просто, хорошо значит еще раз, да? Основные пункты по поводу UDP. Мы с вами работаем сильно быстрее, чем 10 летных годных расходов. когда мы из одного источника нескольким получателем отправляем, а броуд каст это когда совместно всех вот на основе utp легко и незатратно можно такое сделать например можно какое-нибудь, я не знаю, вещание аудио подлога какой-нибудь устроить такое, что кто захотел, получил, подключился, послушал и не надо каждому отдельно отправлять потому что если мы это сделаем на основе TCP, например, дальше отвечать на видео какое-нибудь, чтобы на каждом компьютере у нас здесь повторялась картинка безумное количество будет. И еще их пакеты будут дублироваться. А UDP для broadcast или multicast, ты можешь перечислить, кому надо, тот самый за 10 себе берет. Ошибки случаются. Бывает. Но иногда их просто наплевать можно и ничего с ними не делать. А иногда можно я с этим борюсь сейчас в школе бесконечно какое-то количество времени не знаю какой идиот, на мой взгляд, может я что-то не понимаю, конечно решил сделать так, чтобы протокол dns днс в основном это протокол, который позволяет разрешать именно символные кассеты, удобные кассеты, приятные кассеты, точка улицы, альфа-адреса его сделали на основе utp что это значит? это значит, что я отправляю dns-запрос к серверу, чтобы понять, выяснить, где вообще этот чертов ядрес находится, по какому IP-адресу на сетевом уровне мне вообще ходить, как строить себе маршрутку. и если вдруг что-то случилось в сети, и мне не ответил dns, а он под протоколом jpeg на секунду работает, не могу понять, как мне обратиться вообще. Если бы это был TCP, то, соответственно, я бы добил этот сервер, я бы постоянно ему говорил, что не получил, не получил сегмент, не получил, отправь еще раз. Сделай так, чтобы я вообще это точно выяснил. Знаете, это как студенты бывают, таких разных сортов. Одни из них постоянно пишут, тюкают, ходят до каната, еще что-то. А некоторые такие, ну... которая называется nslookup ns это собственно nserver, а lookup это попытка выяснить вообще средствами графической консоли, где чулка давайте попробуем с вами, уважу, все консоли наверняка запущены в постоянном режиме, я думаю, что до консоли посмотреть настоящее абсолютно, я вот это делал ну судя по по полному типу сервер, который мне ответил, я это в школе делал причем в началке, в каждую ровно наберите на скулкапы любой сервер, который вам было бы интересно, адрес которого вам было бы интересно узнать айден, который вам интересно было бы узнать и, соответственно, кто так интересно Решетка вместо двоеточия. Написано вообще, это форм-53. Это когда спорт, по которому работает деятельность. НС Лукав. Приложение сюда. НС Лукав и домен какой-нибудь, который вы хотите узнать его адрес. Можно герцановский, сравнивать, что поменялось что-нибудь за год. Или такой же, например, ответ, герцановский есть. Кроме герцанова, взгляните, герцановского барона, будет и такой у нас. ну что-то из того же диапазона, но здесь интересный вопрос это либо герцан что-то поменяли и теперь отвечает, либо например герцана сделана распределенная система скорее всего так и есть для нескольких серверов, либо кто-то даст вам повезло, помните 29 например, мне ответил может быть в прошлый раз 26, ну и так далее, да? вот, хороший вопрос, а если повторить команду nslookup, скорее всего ничего не поменяется Конечно, мы повторно делаем запросы одни и те же. И это было бы очень расточительно, если бы каждый раз, когда вы хотите сходить в Яндекс, каждый раз делался бы запрос, какой IP соответствует доменам Яндекса 1.4. Естественно, есть кэш, в котором сохраняются эти данные. Причем кэши много уровней. Самый первый кэш, который есть, он, собственно, ну, либо у вас в браузере бывает, если браузер управляется прямым DNS, плюс есть системный кэш, который у вас в операционной системе работает. Нам, кстати, эта важная информация пригодится для следующего семестра, потому что мы там свой доджер тоже заведем, каждый, надеюсь, и у нас, надеюсь, будут проблемы Кэш есть у вас на компьютере, кэш есть в роутере, небольшой кэш, который раздает вам, например, интернет. Следующий уровень кэша есть у Герцена. все практически равны
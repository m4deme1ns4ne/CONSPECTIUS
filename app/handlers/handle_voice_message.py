from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.enums import ParseMode
from loguru import logger
import os

import app.keyboards.keyboards as kb
from app.templates.send_error_message import send_error_message
from app.templates.edit_message_stage import edit_message_stage
import app.templates.cmd_message as cmd
from app.core.transcribing import transcribing_aai
from app.utils.check_file_exists import check_any_file_exists
from app.utils.conversion_txt_to_docx import txt_to_docx
from app.core.handling import GPTResponse

router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
AUDIO_UPLOAD_PATH = "/Users/aleksandrvolzanin/pet_project/site_conspectius/uploads"
DOCX_OUTPUT_PATH = "/Users/aleksandrvolzanin/pet_project/CONSPECTIUS/app/received_txt/input_file.docx"

@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç")
async def handle_summarize_request(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞."""
    await message.answer(
        "–°–∫–∏–Ω—å—Ç–µ –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ [—Å—Å—ã–ª–∫–µ](https://89af-5-18-188-83.ngrok-free.app)",
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
        reply_markup=kb.confirmation,
    )


@router.callback_query(F.data == "confirmation")
async def process_confirmation(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞."""

    waiting_message = await callback.message.answer(cmd.audio_message_accepted)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    try:
        audio_path = check_any_file_exists(AUDIO_UPLOAD_PATH)
        logger.info("–ê—É–¥–∏–æ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as err:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {err}")
        await send_error_message(bot, msg_edit=waiting_message)
        return

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
    try:
        await edit_message_stage(bot, msg_edit=waiting_message, stage=" –ü–µ—Ä–µ–≤–æ–¥ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç üé§")
        transcription = transcribing_aai(audio_path)
        logger.info("–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ.")
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∞—É–¥–∏–æ: {err}")
        await send_error_message(bot, waiting_message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ GPT
    try:
        await edit_message_stage(bot, msg_edit=waiting_message, stage="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é ü§ñ")
        ai = GPTResponse()
        conspect = await ai.processing_transcribing(transcription)
        logger.info("–ö–æ–Ω—Å–ø–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω GPT.")
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {err}")
        await send_error_message(bot, waiting_message)
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ DOCX
    try:
        txt_to_docx(text=conspect)
        logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ .docx.")
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {err}")
        await send_error_message(bot, waiting_message)
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        input_file = FSInputFile(DOCX_OUTPUT_PATH)
        await edit_message_stage(bot, msg_edit=waiting_message, text="–í–∞—à –∫–æ–Ω—Å–ø–µ–∫—Ç ‚ò∫Ô∏è")
        await callback.message.answer_document(input_file)
        logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {err}")
        await send_error_message(bot, waiting_message)
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        os.remove(DOCX_OUTPUT_PATH)
        logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {err}")

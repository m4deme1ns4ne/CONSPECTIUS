import os

import httpx
from aiogram import Bot, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, InputMediaDocument
from loguru import logger

import app.templates.cmd_message as cmd
from app.core.handling import (ConspectConstructor, GPTClient, GPTConfig,
                               GPTResponse)
from app.core.states import MainState
from app.core.transcribing import AssemblyAIConfig, AudioToText
from app.errors.empty_text import EmptyTextError
from app.templates.edit_message_stage import edit_message_stage
from app.templates.send_error_message import send_error_message
from app.utils.check_file_exists import AudioManager, CheckAudioConfig
from app.utils.conversion_txt_to_docx import DocumentConfig, DocumentManager
from app.utils.get_length_audio import get_length_audio


router = Router()


@router.callback_query(lambda callback: "_" in callback.data)
async def process_confirmation(
    callback: CallbackQuery, bot: Bot, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–ª–∏–Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ,
    –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é,
    –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ DOCX, –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
    –∞ —Ç–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö.
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    current_state = await state.get_state()
    if current_state == MainState.waiting_for_response.state:
        await callback.message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. ‚è≥"
        )
        return
    await state.set_state(MainState.waiting_for_response)

    waiting_message = await callback.message.edit_text(
        text=cmd.audio_message_accepted, parse_mode=ParseMode.MARKDOWN
    )

    telegram_id = callback.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏ –¥–ª–∏–Ω—ã –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
    data_parts = callback.data.split("_")
    lenght_conspect = data_parts[0]
    language = data_parts[1]

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –Ø–∑—ã–∫: {language}, –¥–ª–∏–Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {lenght_conspect}"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    try:
        check_audio_config = CheckAudioConfig()
        audio_manager = AudioManager(config=check_audio_config)
        audio_path = audio_manager.check_audio_file(telegram_id)
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –ê—É–¥–∏–æ –Ω–∞–π–¥–µ–Ω–æ: {audio_path}"
        )
    except FileNotFoundError as err:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {err}")
        raise Exception(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è: {err}"
        ) from err
    except Exception as err:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ: {err}"
        )
        await send_error_message(
            bot, msg_edit=waiting_message, error="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùóÔ∏è"
        )
        return
    finally:
        await state.clear()

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
    try:
        await edit_message_stage(
            bot,
            msg_edit=waiting_message,
            stage="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é üé§ü§ñ\n\n–û–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 3 –¥–æ 8 –º–∏–Ω—É—Ç ‚è≥",
        )
        # ------------------------------------------------- <- –≠—Ç–æ—Ç –∫—É—Å–æ–∫ –∫–æ–¥–∞ —Å–∫–∏–¥—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏, –æ–±—ã—á–Ω–æ —ç—Ç–æ –¥–æ–ª–≥–æ
        #                                                      –ø–æ—ç—Ç–æ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª,
        #                                                      —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –¥–æ–ª–≥—É—é —Ç—Ä–∞–Ω—Å—Ä–∏–±–∞—Ü–∏—é.

        #                                                      –í –±—É–¥—É—â–µ–º –µ–≥–æ –Ω–µ –±—É–¥–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –±—É–¥—É—Ç –Ω–∞–ø–∏—Å–∞–Ω—ã –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã(–Ω–∞–¥–µ—é—Å—å).
        config_transcribing = AssemblyAIConfig()
        audio_to_text = AudioToText(config=config_transcribing)
        transcription = await audio_to_text.transcribing(
            file_path=audio_path, language=language
        )
        # -------------------------------------------------
        # with open("/CONSPECTIUS/example/text.txt", "r") as file:
        #     transcription = file.read()
        # -------------------------------------------------
        if not transcription:
            raise EmptyTextError(
                f"–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –ø—É—Å—Ç: type{type(transcription)}"
            )
    except FileNotFoundError as err:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {err}")
        raise Exception(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {err}"
        ) from err
    except EmptyTextError as err:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –ø—É—Å—Ç–∞—è: {err}"
        )
        raise Exception(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–π: {err}"
        ) from err
    except Exception as err:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∞—É–¥–∏–æ: {err}"
        )
        await send_error_message(
            bot,
            waiting_message,
            error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞‚ùóÔ∏è",
        )
        return
    finally:
        await state.clear()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–Ω–∞–µ—Ç –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Å–ø–µ–∫—Ç–∞, —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ
    # –ê –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–µ—Ç –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Å–ø–µ–∫—Ç–∞, —Ç–æ –æ—Å—Ç–∞—ë—Ç—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è lenght_conspect

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if lenght_conspect == "cancellength":
        try:
            lenght_conspect = get_length_audio(file_path_audio=audio_path)
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –î–ª–∏–Ω–∞ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ {lenght_conspect}"
            )
        except Exception as err:
            logger.error(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ: {err}"
            )
            await send_error_message(
                bot,
                waiting_message,
                error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞‚ùóÔ∏è",
            )
            return
        finally:
            await state.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ GPT
    try:
        await edit_message_stage(
            bot,
            msg_edit=waiting_message,
            stage="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é ‚úçÔ∏èü§ñ\n\n–û–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 2-—Ö –º–∏–Ω—É—Ç. ‚ö°",
        )
        config_gpt = GPTConfig()
        gpt_client = GPTClient(config_gpt)
        answer_gpt = GPTResponse(gpt_client)
        conspect_constructor = ConspectConstructor(answer_gpt)
        conspect = await conspect_constructor.processing_conspect(
            text=transcription, lenght_conspect=lenght_conspect
        )
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –ö–æ–Ω—Å–ø–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω GPT."
        )
    except httpx.ProxyError as err:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –ü—Ä–æ–∫—Å–∏-–æ—à–∏–±–∫–∞: {err}")
        raise Exception(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {err}"
        ) from err
    except Exception as err:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {err}"
        )
        await send_error_message(
            bot,
            waiting_message,
            error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞‚ùóÔ∏è",
        )
        return
    finally:
        await state.clear()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ DOCX
    try:
        doc_config = DocumentConfig()
        doc_manager = DocumentManager(doc_config)
        doc_manager.txt_to_docx(
            text=conspect,
            lenght_conspect=lenght_conspect,
            new_file_title=conspect.title,
        )
        doc_file_path = doc_manager.path_docx
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ .docx."
        )
    except FileNotFoundError as err:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {err}")
        raise Exception(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ .docx: {err}"
        ) from err
    except Exception as err:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {err}"
        )
        await send_error_message(
            bot,
            waiting_message,
            error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç .docx ‚ùóÔ∏è",
        )
        return
    finally:
        await state.clear()

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
    try:
        if not os.path.exists(doc_file_path):
            raise FileNotFoundError(
                f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª {doc_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"
            )
        new_file_path = os.path.join(
            os.path.dirname(doc_file_path), f"{conspect.title}.docx"
        )
        os.rename(doc_file_path, new_file_path)
        doc_file_path = new_file_path
    except FileNotFoundError as err:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {err}")
        raise Exception(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–Ω–∏–µ: {err}"
        ) from err
    except Exception as err:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {err}"
        )
        await send_error_message(
            bot,
            waiting_message,
            error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ‚ùóÔ∏è",
        )
        return
    finally:
        await state.clear()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        input_file = FSInputFile(doc_file_path)
        await bot.edit_message_media(
            chat_id=waiting_message.chat.id,
            message_id=waiting_message.message_id,
            media=InputMediaDocument(
                media=input_file,
                caption="‚òùÔ∏èü§ì –í–∞—à –∫–æ–Ω—Å–ø–µ–∫—Ç\n\nü§ñ –ù—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç? –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–µ–≥–æ –¥—Ä—É–≥–∏–º:\nhttps://t.me/CONSPECTIUS_bot",
            ),
        )
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )
    except FileNotFoundError as err:
        raise Exception(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç—Ä–∞–≤–∫–∏: {err}"
        ) from err
    except Exception as err:
        await state.clear()
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {err}"
        )
        await send_error_message(
            bot,
            waiting_message,
            error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤–∞–º‚ùóÔ∏è",
        )
        return
    finally:
        await state.clear()

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ docx
    try:
        os.remove(doc_file_path)
        logger.debug(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
        )
    except FileNotFoundError as err:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {err}"
        )
        raise Exception(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –ù–µ –Ω–∞–π–¥–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {err}"
        ) from err
    except Exception as err:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {err}"
        )

    # –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Ñ–∞–π–ª–∞
    try:
        os.remove(audio_path)
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except FileNotFoundError as err:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {err}"
        )
        raise Exception(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –ù–µ –Ω–∞–π–¥–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {err}"
        ) from err
    except Exception as err:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}; –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {err}"
        )

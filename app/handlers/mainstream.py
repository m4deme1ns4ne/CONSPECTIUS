import os

from aiogram import Bot, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile
from loguru import logger

import app.templates.cmd_message as cmd
from app.core.handling import GPTResponse
from app.core.transcribing import transcribing_aai
from app.templates.edit_message_stage import edit_message_stage
from app.templates.send_error_message import send_error_message
from app.utils.check_file_exists import check_any_file_exists
from app.utils.conversion_txt_to_docx import txt_to_docx
from app.utils.get_length_audio import get_length_audio


router = Router()


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
AUDIO_UPLOAD_PATH = (
    "/Users/aleksandrvolzanin/pet_project/site_conspectius/uploads"
)
DOCX_OUTPUT_PATH = "/Users/aleksandrvolzanin/pet_project/CONSPECTIUS/app/received_txt/input_file.docx"


@router.callback_query(lambda callback: "_" in callback.data)
async def process_confirmation(
    callback: CallbackQuery, bot: Bot, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–ª–∏–Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ,
    –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é,
    –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ DOCX, –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
    –∞ —Ç–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö.
    """
    waiting_message = await callback.message.edit_text(
        text=cmd.audio_message_accepted, parse_mode=ParseMode.MARKDOWN
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏ –¥–ª–∏–Ω—ã –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
    data_parts = callback.data.split("_")
    lenght_conspect = data_parts[0]
    language = data_parts[1]

    logger.info(f"–Ø–∑—ã–∫: {language}, –¥–ª–∏–Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {lenght_conspect}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    try:
        audio_path = check_any_file_exists(AUDIO_UPLOAD_PATH)
        logger.info("–ê—É–¥–∏–æ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as err:
        await state.clear()
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {err}")
        await send_error_message(
            bot, msg_edit=waiting_message, error="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùóÔ∏è"
        )
        return

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
    try:
        await edit_message_stage(
            bot,
            msg_edit=waiting_message,
            stage="–ü–µ—Ä–µ–≤–æ–¥ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç üé§",
        )
        transcription = await transcribing_aai(
            file_path=audio_path, language=language
        )
        if not transcription:
            raise Exception("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    except Exception as err:
        await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∞—É–¥–∏–æ: {err}")
        await send_error_message(
            bot,
            waiting_message,
            error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞‚ùóÔ∏è",
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–Ω–∞–µ—Ç –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Å–ø–µ–∫—Ç–∞, —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ
    # –ê –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–µ—Ç –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Å–ø–µ–∫—Ç–∞, —Ç–æ –æ—Å—Ç–∞—ë—Ç—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è lenght_conspect

    if lenght_conspect == "cancellength":
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await edit_message_stage(
                bot,
                msg_edit=waiting_message,
                stage="–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è üé§",
            )
            lenght_conspect = get_length_audio(file_path_audio=audio_path)
            logger.info(f"–î–ª–∏–Ω–∞ –∞—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ {lenght_conspect}")
        except Exception as err:
            await state.clear()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ: {err}")
            await send_error_message(
                bot,
                waiting_message,
                error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞‚ùóÔ∏è",
            )
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ GPT
    try:
        await edit_message_stage(
            bot,
            msg_edit=waiting_message,
            stage="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é ü§ñ",
        )
        ai = GPTResponse()
        conspect = await ai.processing_transcribing(
            text=transcription, lenght_conspect=lenght_conspect
        )
        if not conspect:
            logger.error("–ö–æ—Å–Ω–ø–µ–∫—Ç –ø—É—Å—Ç–æ–π")
            raise Exception()
        logger.info("–ö–æ–Ω—Å–ø–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω GPT.")
    except Exception as err:
        await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {err}")
        await send_error_message(
            bot,
            waiting_message,
            error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞‚ùóÔ∏è",
        )
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ DOCX
    try:
        txt_to_docx(text=conspect)
        logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ .docx.")
    except Exception as err:
        await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {err}")
        await send_error_message(
            bot,
            waiting_message,
            error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç .docx ‚ùóÔ∏è",
        )
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        input_file = FSInputFile(DOCX_OUTPUT_PATH)
        await edit_message_stage(
            bot, msg_edit=waiting_message, text="–í–∞—à –∫–æ–Ω—Å–ø–µ–∫—Ç ‚ò∫Ô∏è"
        )
        await callback.message.answer_document(input_file)
        await state.clear()
        logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as err:
        await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {err}")
        await send_error_message(
            bot,
            waiting_message,
            error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤–∞–º‚ùóÔ∏è",
        )
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        os.remove(DOCX_OUTPUT_PATH)
        os.remove(audio_path)
        logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {err}")

from aiogram import Bot, F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from loguru import logger

import app.keyboards.keyboards as kb
import app.templates.cmd_message as cmd
from app.templates.cmd_message import start_conspect_menu
from app.templates.send_error_message import send_error_message


router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
LANGUAGES = (
    "en",
    "en_au",
    "en_uk",
    "en_us",
    "es",
    "fr",
    "de",
    "it",
    "pt",
    "nl",
    "hi",
    "ja",
    "zh",
    "fi",
    "ko",
    "pl",
    "ru",
    "tr",
    "uk",
    "vi",
)
LENGHT_CONSPECT = ("low", "medium", "high")


@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç üìÑ‚ú®")
async def handle_summarize_request(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç.
    """
    await message.answer(
        text=start_conspect_menu,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
        reply_markup=kb.audio_confirmation_menu,
    )


@router.callback_query(F.data == "select_language")
async def select_language(
    callback: CallbackQuery, bot: Bot, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ê—É–¥–∏–æ —Å–∫–∏–Ω—É—Ç–æ ‚úîÔ∏è".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
    """
    try:
        await callback.message.edit_text(
            text=cmd.audio_language, reply_markup=kb.language_selection_menu
        )
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞: {err}")
        await state.clear()
        await send_error_message(
            bot, callback.message, error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞‚ùóÔ∏è"
        )
        return


@router.callback_query(
    lambda callback: callback.data in LANGUAGES
    or callback.data == "cancel_language"
)
async def select_length(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ê—É–¥–∏–æ —Å–∫–∏–Ω—É—Ç–æ ‚úîÔ∏è".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã –∫–æ–Ω—Å–ø–µ–∫—Ç–∞.
    """
    try:

        language = callback.data
        await callback.message.edit_text(
            text=cmd.conspect_length,
            reply_markup=await kb.select_length(language),
            parse_mode=ParseMode.MARKDOWN,
        )
    except Exception as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–ª–∏–Ω—ã –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {err}")
        await state.clear()
        await send_error_message(
            bot, callback.message, error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞‚ùóÔ∏è"
        )
        return

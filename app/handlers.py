from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart
from aiogram import F, Router
import os
import sys
from datetime import datetime, timedelta

from cmd_message import start_message, subscription
import keyboards as kb
from main_processing import main_processing
from conversion_txt_to_docx import txt_to_docx
from loguru import logger
from cmd_message import error
from database import insert_payment_data
from database.check_subscription_status import check_subscription_status


router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@logger.catch
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(start_message, reply_markup=kb.main)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.audio)
async def handle_voice_message(message: Message):
    telegram_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not check_subscription_status(telegram_id):
        await message.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    audio = message.audio
    file_id = audio.file_id
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç File –ø–æ file_id
    file = await message.bot.get_file(file_id)
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_path = file.file_path
    download_path = "/home/alexandervolzhanin/pet-project/CONSPECTIUS/app/audio/audio_message.mp3"

    await message.bot.download_file(file_path, download_path)

    await message.answer("""
üéß –í–∞—à–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. ‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-15 –º–∏–Ω—É—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!
                         """)

    logger.info(f"–ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    conspect = main_processing()
    logger.info(f"–ö–æ–Ω—Å–ø–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ .docx
    try:
        txt_to_docx(conspect)

    except Exception as err:
        await message.answer(error)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {err}")
        sys.exit()

    try:
        # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
        file_path = '/home/alexandervolzhanin/pet-project/CONSPECTIUS/app/received_txt/example.docx'
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputFile
        input_file = FSInputFile(file_path)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.reply_document(input_file, caption="–í–∞—à –∫–æ–Ω—Å–ø–µ–∫—Ç: ")
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã 
        os.remove(file_path)
        os.remove(download_path)
        logger.info("–§–∞–π–ª —Å–∫–∏–Ω—É—Ç")

    except Exception as err:
        await message.answer(error)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Ñ–∞–π–ª–∞: {err}")
        sys.exit()


@router.message(F.text == "/pay")
async def process_payment(message: Message):
    telegram_id = message.from_user.id
    payment_date = datetime.now()
    subscription_end_date = payment_date + timedelta(days=30)

    insert_payment_data(telegram_id, payment_date, subscription_end_date, subscription_status=True)

    await message.answer("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!")


@logger.catch
@router.message(F.text == "–ü–æ–¥–ø–∏—Å–∫–∞")
async def subscription_message(message: Message):
    await message.answer(subscription)

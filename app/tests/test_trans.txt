это регистры оператор, это регистры оператор они вместе? да, ну они же у вас AX и BX вот это вот и есть, вот эти R2, R2 и R3, они одинаковые делителя делимого и так далее то есть когда вы записываете операции так скобочка закрываем так следующие 4 регистр адреса функция его нужен для запоминания, для запоминания, а иногда в некоторых случаях для формирования, в основном для запоминания, иногда даже для формирования адреса операндов результата, адреса операндов результата. РД6 это набор из k индексных регистров, содержимое которых используется для формирования адресов. и rg7 это тоже набор rg7 тоже набор вспомогательных регистров набор вспомогательных регистров которые носят универсальный характер которые являются универсальными и которые по желание программиста или же в зависимости от кода. И вот отсюда вытекает некая классификация. Запишите с абзаца. Часть операционных регистров могут быть адресованы в командах для выполнения операции. для выполнения операции с их содержимым. И такие регистры мы будем называть программно доступными. То есть, если мы можем адресовать, можем записывать туда данные, то мы будем их называть программно доступными. Ну и к таким регистрам относятся сумма, Остальные регистры не адресуются. Идем дальше. Запишите. Вычислительные устройства можно классифицировать различным образом. По обрабатываемой информации. 2. По способам обработки данных и по логической структуре. и соответственно в зависимости от этих функций и соответственно от наборов микро операции которые она реализует точка технические на входе каждого или связи, обеспечивающие связь между регистрами. Связь между регистрами, что позволяет реализовывать достаточно сложные микрооперации. То есть, если нам нужно обработать множество каких-то данных или очень длинные числа, то мы используем наборы этих регистров. Точка. Таким образом выполнение вычислительных операций сводится к процессам Использование микроопераций. Ну и которые довольно простые. Что они делают? Микрооперации, которые управляют передачей слов в Аллу. Которые управляют передачей слов или вот этих данных в Аллу и реализуют по преобразованию этих слов. Итак, у нас имеется набор микроопераций, которые функционально управляют передачей слов в ООО и реализуют действия по преобразованию этих условных слов или же данных. Определение. значит порядок выполнения микрокоманд и определяется и определяет алгоритм выполнения вычислительных операций то есть вычислительные операции вот на этом уровне сводятся к микрокомандам последовательности их исполнения алгоритм для выполнения операций. Соответственно, связи между регистрами, реализацией их функций и определяет логические операции. В том числе, основные операции это аэфитические. арифметические операции ну сейчас мы с вами рассмотрим как это реализуется на практике значит вот схема связи В прошлый раз были сильнее? Зарисуйте ее. Значит, это у нас блок-схема алгоритма. Блок-схема арифметика логического устройства. Можно свет выключить? Давайте. Я, вроде бы, у вас только включил, а здесь он выключен. что-то на входе, видим, что у нас операнды, вот эти вот регистры RG-2 и RG-3, это по сути вот эти вот элементики A и B сверху, у нас слева поступают некие команды, поступают некие признаки, которые называются флагами, что такое флаги? это некоторые индикаторы показывающие результаты выполнения прошлых операций которые были до нынешнего состояния такие же флаги мы с вами видим на выходе эти флаги индуцируют некое состояние в котором находится ООН и в частности операция, которая была выполнена последней. Внизу мы с вами видим результат применения команды, которая была у нас на ходе слева. Эта команда была применена вот этим операндом. который вышел вниз. Так, ну, давайте теперь запишем. Запишите. Значит, стрелочками указаны входные и выходные слова. Стрелочками указаны входные и выходные слова. Значит, все стрелочки, да, это данные. В нашем случае мы будем называть их словами. Флаги это признаки. Выполнение предыдущей операции. Ну и, значит, поясните, что это относится к флагам левым, да? На фронте флаги левые. Например, можете записать результат сравнения операторов. Что из них скажет нам больше? Результат сравнения операторов. Далее, результат выполнения текущей операции. Это флаги, которые находятся справа. Существуют так называемые одноместные операции. Например, операции инверсии битов слова или же битов из двигателей. Позже рассмотрим эти примеры. При которых второй оперант, B, не участвует. Достаточно одного операнта A и самой команды, которая поступает слева. Идем дальше. Это у нас блок схемы. Такая формальная и условная. Эта условная схема реализуется на практике более сложным устройством, которое сейчас будет у нас на экране. Давайте его зарисуем. мы с вами здесь видим что идут некие у нас Это провода. Слева у нас кодовая шина данных. К ней подключены стрелочками регистры. Справа вы видите кодовую шину инструкций, операций, которые могут реализовываться. И через определенную схему управления, условную, осуществляется взаимодействие с регистрами, и осуществляется влияние на сумматор, которое осуществляет обработку данных, которые у нас есть в регистрах. Вы видите, что часть регистров общается, взаимодействует и туда, и обратно. а некоторые регистры на сумматор действуют только на ввод данных. Давайте запишем теперь поподробнее то, как вот эта вся сложная схема работает. Запишите. Рассмотрим примеры работы. а в случае операции, например, сложения. В случае операции сложения. Так, ну, значит, структурно, да, мы с вами видим, что Алло в нашем случае состоит из двух регистров, да. Регистр 1, регистр 2, вот, схема управления, это вот этот блок там справа, и сумма, Арифметическая операция сложения выполняется в соответствии с тактами. Арифметическая операция выполняется в соответствии с тактами. То есть за один такт, за некий промежуток времени, выполняется только что одна операция. Хотя есть Аллу, которые выполняют сразу множество Так, ну, значит, какие, значит, это операции? Запишите. Двоеточие. Первая операция. Операция номер один. Значит, значение операнда один, значение операнда один, участвующего, да, вот в этой операции, по шине данных поступает значение операнда 1 по шине данных поступает в регистр 1. Ну или же оно уже там у нас находится, если это была какая-то предыдущая операция и данные нас этим устраивают. Далее. Второй такт. Значение операнда 2 по шине 2 также поступает в регистр значение операнда 2 поступает по шине данных в регистр 2 3 так по шине инструкции по шине инструкции это вот видите правая по шине инструкции поступает инструкция на выполнение операцию схему управления регистр пока и не в сумматор, а в некоторую схему управления. Следующий шаг. Данные из регистров поступают в сумматор. Мы с вами видим вот эти две стрелочки. От регистра 1 стрелочка опускается вниз в сумматор и от регистра 2 также стрелочка идет вниз данные из регистров поступают в сумматор и схема управления схема управления дает команду на выполнение сложения то есть фактически за один такт здесь параллельно осуществляется две микро операции следующий такт номер 6 5 значит результат сложения поступает и вот скажите куда поступает результат сложения поступает в регистр номер один. Мы с вами видим вот эту крайнюю стрелочку, которая идет из сумматора у нас наверх, в регистр номер один. Ну и последняя операция. Это признаки выполнения операции Валу. Признаки выполнение операции волну поступают в регистр флагов поступают в регистр флагов вот где эта операция у нас какой она обозначена стрелочкой последняя микро операция признаки выполнения операции волну поступают в регистр Обратите внимание, данные с кодовой шины поступали в регистр №1 и в регистр №2. Слева направо шли. Обратите внимание, что эта верхняя стрелка идет не просто слева направо. направлена обоюда. Верхняя стрелочка между шиной данных и регистром номер один у нас обоюдонаправленная. И вот эта обратная связь как раз и что? И реализует поступление данных в регистр флагов. Можете пометить? То есть это обратная реакция на окончание выполнения этой операции ну а теперь давайте самостоятельно расставьте циферки последовательности в вашей схеме поставьте циферки какие операции идут первыми, вторыми, третьими поставьте один, два, три, четыре, пять операцию номер 6 мы ставим с вами на вот этой обраточке стрелочка, которая возвращается в шинку данных из регистра 1. Ну а остальные стрелочки проиндексируйте. Причем те операции, которые у вас идут одновременно, поставьте там одну и ту же цифру. ну, расставили ну, где у вас будет единичка-то? единичка, где будет? ну, между чем и чем? Там же, где и последняя? Да, совершенно верно. Там же, где и последняя. Только что. Единичка у нас будет нарисована где? Справа, да? Единичка справа. Это вот правая часть вот этой маленькой стрелочки. Вот здесь будет единичка, да? Вот. А там, слева, да? Будет либо шестерочка, да? Либо семерочка. Ставьте там единичку. Так. Второе. Что у нас? Правильно, стрелочка ниже. Тоже из шины данных. В регистр номер 2 идут слова. Значит, ставим на стрелочке номер 2 двоечку. Дальше, что мы с вами делаем? Надо поставить тройку. Где мы будем ставить тройку? Где ставим тройку? На шине данных или на шине инструкций? Правильно, на шине инструкций. То есть, перебрасываемся, да, направо. И у нас там одна единственная стрелочка, да, которая идет, что, справа налево. Да, давайте, поставьте там троечку. Направление там единственное, поэтому просто три. Так, следующее. Что у нас? идет нам нужно поставить цифру 4 скажите сколько у нас будет четверок 1 или 2 2 правильно отлично где мы их ставим да значит по сути да нам нужно что данные из регистров поступают в сумма так сколько значит там у нас будет четверочек 2 уже две и параллельно чего и да дают команду на выполнение сложения куда сумма так сколько значит у нас тогда у четверых 3 давайте расставляйте 3 четверки и так четверка номер один идет от регистра 1 к сумматору 4 И четвёрка идёт из схемы управления, а также сумматор. Вот это у нас четыре микрокоманды, которые будут выполнены в один и тот же такт. В один и тот же такт будет выполнено четыре микрокоманды. Далее. Следующее, что у нас. Операция номер пять. Узловная пятая микрокоманда. какая она у нас стрелочка где правильно и сумма который поднимается поставьте там пятерочку пятерочка там ну и последняя что шестерка мы с вами уже не сказали да из регистра 1 из регистра 1 данные поступают у нас что значит регистр флагов Давайте рассмотрим еще один пример. Это операцию сложения. Запишите дальше. Рассмотрим пример работы. на операции вычитания, реализующего вычитание. Так, ну, скажите мне, что-нибудь изменится у нас с операторами? Как вы думаете? Значит, Аллу у нас, естественно, используется тоже, да? То же самое Аллу. Что вот по первой операции? Она у нас изменяется или нет? Нет, совершенно верно, запишите. Да, и вторая не меняется, да? Вторая тоже не меняется. Запишите тогда. Итак, первая микрофонная команда, это значение операнда 1. Значение операнда 1 поступает по кодовой решении, по той же решении в регистр 1. Так, дальше. Вторая. тоже по кодовой шине поступает в регистр 2. Так, дальше. Что изменяется в третьей микрокоманде? Изменяется что-нибудь или она у нас остается? Что следующее-то у нас? Итак, мы заполнили с вами регистры. Регистр 1. и регистра 2 заполнили словами. Заполнили словами. Что у нас было в прошлом случае, когда мы с вами слагали? Какая у нас была команда? Шины инструкции. Да, шины инструкции. Чего было? Шина инструкции поступала. Инструкция на выполнение... Да, вот это, значит, остается у нас или нет? Да, совершенно верно. То есть, значит, алгоритм остается, а меняется что? А? Да, меняется что? Сама инструкция. Алгоритм остается, а инструкция изменяется. Ну, отлично, запишите. Итак, по кодовой шине передается опять, да, передается, инструкция уже другая. Инструкция на вычитание, на выполнение операции вычитания. Куда? Опять в схему управления. Дальше. Что у нас дальше идёт? Есть ли у нас алгоритмы, которые могут вычитать. И как они реализуются? Вот, совершенно верно. Применяются специальные алгоритмы обработки, преобразования данных. Давайте их запишем. Итак, после того, как в схему управления поступила инструкция, Следующий шаг. Схема управления преобразует положительное число в отрицательное. Схема управления преобразует положительное число в отрицательное в формате дополнительного кода. На практике чуть-чуть попозже мы рассмотрим это. в формате дополнительного кода. Следующая. Результат преобразования оператора поступает в сумматор. Результат преобразования поступает в сумматор. Здесь у нас никаких изменений нет, все так же. Далее. Следующая. Сумматор. Сумматор складывает два числа. Первое число, которое у нас было в регистре 1. И второе, преобразованное, измененное. Сумматор в результате даже операции вычитания все равно складывает преобразованные определенным образом в формате дополнительного хода. отрицательные числа. Дальше все опять без изменений. Результат сложения поступает в регистр номер один. Регистр номер один получает результат сложения. Ну и в заключении последнее. Результат операции результат операции алло да значит от репистр 1 поступает да в некоторый да результирующий блок да вот этот вот регистр флага результат операции поступает в результирующий или же в регистр флага так ну вот Задание вам надо. Напишите, пожалуйста, алгоритмы самостоятельно. Умножение и деление. Как работает ОЛУ в режиме выполнения операции умножение и деление. Мы с вами рассмотрели операции сложения, операции мечтания. и деления, что также в основных микрокомандах у нас отсутствует. И все операции, опять же, делаются на основе что? Сложения и сдвига. Сложения и сдвига. Вот, значит, немножечко подумайте, как будет работать Allure и нарисуйте вот такие вот модельки. Как вы думаете, значит, как будут двигаться данные, Какое будет осуществляться преобразование где? В схеме управления. То есть что-то будет изменяться где? В схеме управления над данными. И что? По кодовой решению вот этих вот инструкций будут приходить другие у нас каналы. Регистр 1 у нас остается. Регистр 2 остается. Сумматор остается. Там изменения у нас не будет. Идем дальше. Запишите следующее. Перечислим основные операции, которые выполняются на этом арифметикологическом устройстве. Основные операции, выполняемые в арифметико-логическом устройстве. Они могут реализовывать различные функции. В зависимости от этих функций мы можем их разделить на группы. ALU реализует логические, арифметические, различные операции, различные функции. Поэтому мы можем разделить все эти операции на ряд групп. Первая группа. Операции двоичной арифметики для чисел с фиксированной точкой. Операции двоичной арифметики для чисел с фиксированной точкой. Следующая группа. Операции двоичной арифметики. Или в скобочках можете записать шестнадцатиричной. В нашем с вами случае мы видим, что мы двоичные числа не вводим. Мы вводим шестнадцатиричные числа и процессор. Регистры успешно справляются с этой обработкой. Итак, операции двоичной или же шестнадцатиличной арифметики для чисел с плавающей точкой. Третья группа. Операции десятичной арифметики. операции десятичной арифметики следующая четвертая группа операции так называемой индексной арифметики операции индексной арифметики использующихся или необходимых для модификации адресов команд четвертая группа у нас операции индексной Арифметики, использующиеся при модификации адресов команд. Так, следующая группа. Операции специальной арифметики. Операции специальной арифметики. Ну, в нашем случае, наверное, мы до этого не доберемся, да? Дальше, логические операции. Операции над логическими кодами. И последние операции над алфавитно-цифровыми данными или полями. Операции над алфавитно-цифровыми данными и полями. Значит, это группа такая, большая, универсальная, и теория должна была бы быть на любых типах, видах вычислительных устройств. Но в жизни, на самом деле, очень мало устройств, которые реализуют все виды вот этих типов операций. Ну и запишем так, что современные Компьютеры, современные компьютеры общего назначения, как правило, современные компьютеры общего назначения реализуют, как правило, все виды, все группы. Вот. Но часть аппаратуры, например, микро, ЭВМ, специализированные ЭВМ, могут и не иметь оборудования, да, или специального вот этого АЛУ, например, для обработки чисел, скажем, с плавающей точкой, с плавающей точкой. Дальше. Оборудование или АЛУ для обработки десятичной арифметики в нашем в случае, да, мы с вами числа преобразуем в шестнадцатилетчные, да, в десятичные мы с вами вводить не можем в регистры. Вот. Ну и третье то, что может отсутствовать, это последняя вот эта группа, да, значит, отсутствуют микрокоманды, да, операции над алфавитно-цифровыми полями. Значит, вот эти три группы, в обычных типовых EVM могут и отсутствовать. Если они отсутствуют, то это не означает, что мы не можем обрабатывать эти данные. В этом случае их отсутствие в железе заменяется заменяется тем, что вводятся специальным образом на уровне программ специальные подпрограммы. То есть загруженные могут быть специальные подпрограммы, которые позволят нам обрабатывать вот эти данные, эмулируя вот этот режим работы. Аллу отсутствующие у нас на уровне железа. Вот это себе отметим. Если на уровне аппаратных средств какие-то виды операции отсутствуют, то они могут быть эмулированы. Какие это группы? Арифметические, самые простые. Сложение, вычитание. умножение, деление. Исходя из того, что ряд операций выполняется с помощью использования других операций, эти арифметические операции делятся на две подгруппы. Напишите. Сложение и вычитание сложение и вычитание относятся к операциям короткого типа короткого типа то есть они реализуются у нас непосредственно очень оперативно да и быстро ну а вот операции умножения и деления они относятся к длинным операциям потому что что требует значит более сложных Процедура алгоритмов преобразования. Итак, арифметические операции делятся на два класса. Короткие и длинные. Логика. Запишите. Группа логических операций. здесь у нас выделяются в основном операция логического или это у нас дизъюнкция и обратная операция конъюнкция логическая и вот две операции которые в основном используются для реализации этих логических вычислениях используются специальные арифметические операции. Мы с вами об этом сказали. Это у нас группа номер 5. Операции специальной арифметики. Какие это операции? Это нормализация. К специальным операциям относятся нормализация, операция арифметического сдвига, К специальным арифметическим операциям относятся операции нормализации. Операции арифметического сдвига понадобятся для того, чтобы реализовать деление умножения. арифметический сдвиг, причем он реализуется в двух видах. В двух видах, в скобочках отметьте, да, знаковые. Значит, запишите так. Первое, да, сдвигаются только цифровые разряды. Сдвигаются только цифровые разряды. И второй, да, значит вид знаковый разряд остается на месте знаковый разряд остается на месте ну то есть там плюс минус сколько у нас так значит этого арифметически да сдвиг и третьим последним специальный операция специальная это логический сдвиг логический значит Здесь одна операция, одна функция. При логическом сдвиге знаковый разряд сдвигается вместе с цифровыми разрядами. То есть это одновременно. Знаковый разряд сдвигается вместе с цифровыми разрядами. Мы с вами сказали, что наши EVM работают на двоичной логике. И, соответственно, вот это наше ALU описывается функциями двоичной арифметики, двоичной логикой. более сложные, да, и более развитые Аллу, основанные на использовании троичной, четвертичной, да, четвертичной, десятичной, и даже экзотичных каких-то, да, логик, И соответственно у нас будут и ВМ, и АЛУ, и вот эти все структуры другие. Вот это вы себе отметьте. Большая часть ВМ в настоящее время использует двоичную логику и функционирует АЛУ. 2-ичной булевой логики. Но если используются другие, то 2-ичная логика здесь уже не работает. С этим мы вроде бы разобрались. здесь все вроде нормально так, ну что, сейчас еще немножечко мы с вами скажем о особенностях реализации арифметических операций и то, как вот этот реализуется сдвиг ну, запишите так, что значит, в вычислительной технике вот этот блок халу комбинационная цифровая схема, комбинационная цифровая схема, выполняющая арифметические операции. И в основном вот эти операции осуществляются у нас по битовой. То есть это по битовой операции. Причем над целыми. Работа АЛУ строится, в основном, по битовам и над целыми двоичными числами. Если эта схема АЛУ будет обрабатывать операции с плавающей точкой, операции с плавающей точкой, то и сам блок ALU будет отличаться. Сам блок будет отличаться, и в частности, да, у него будет другая архитектура. Вот, ну, про программирование, значит, вот этих вот систем, мы скажем чуть-чуть попозже, про языки, да, которые позволяют программировать эти устройства. Ну, а сейчас немножечко, значит, вот уточним, значит, о операциях, да. Значит, запишите так, что Значит, при работе, при работе Аллу, при работе Аллу, состояние, значит, выходов, состояние выходов, значит, у нас меняется, и оно может быть различно, да? И вот это состояние определяется у нас на физическом уровне сигналами. сигналами. Сигналами, да. И вот эти сигналы, они определяют некие статусы. Некие статусы, да, или вот эти выходные, да, сигналы, которые передают нам информацию о проведенных, да, или же реализующихся операциях. И, значит, какие у нас могут быть статусы, да? Статусы, вот эти флаги, значит, да, индикаторы на выходах. Значит, первое, да, у нас может быть на выходе в качестве статуса 0. 0, да? Значит, если у нас 0, то это означает, что все биты, Все битые состояния являются логическим нулем. Значит, может быть 0. Дальше. У нас может быть статус отрицательный. Условное нет. Статус на выходе вот этого флага может быть отрицательным. Значит, он означает, что результат арифметической операции отрицательный. Следующая может быть индикатор, означающий переполнение. Индикатор, означающий переполнение. Означает он, что в результате арифметической операции был превышен лимит использования нормативного числового диапазона. Получилось более чем. Допускается для обработки. Следующее. Может быть индикатор, находящийся в состоянии четности. Индикатор, который показывает состояние четности. Это означает, что на выходе у нас имеется либо четное, либо нечетное число битов. Либо четное, либо нечетное число битов. Ну и операция переноса может быть на выходе. Операция переноса. Она формируется в результате, например, операции сложения или операции вычитания, если у нас происходит индикация некоторого бита переполнения. То есть, если в результате некой операции у нас осуществляется переполнение, то автоматически будет осуществлен двоичный сдвиг. Эти индикаторы реализуются в тех операциях, о которых мы с вами сказали. Здесь у нас и сложение, и операция сложения с переносом, и вычитание. Операция вычитания с заимствованием. Операция дополнения двойки. дополнение двойки или же это операция отрицания отрицания операция приращения вот и операция пробка все эти операции мы с вами рассмотрим рассмотрим но значит реализация этих операций части там и из них, значит, реализуется на основе вот этой, значит, операции специальной арифметики, о которой мы с вами сказали, операции сдвига битов. Вот. Ну и вот перед тем, как записывать алгоритмы, да, реализации, значит, вот этих более сложных операций, давайте посмотрим на классификацию, да, битовых сдвигов, которые реализуются у нас в АЛУ. В качестве примера возьмем простейшие. Некоторые 8 разрядные АЛУ. И посмотрим, какие могут быть примерчики для реализации. Я сделаю поменьше, чтобы видеть, а вы скажите, видно ли вам. и вот на каком уровне так вот так вам видно или не очень видно можем еще уменьшить нет чтобы видеть все или хотя можем и оставить вот так видите или плохо видите нормально нормально или Давайте тогда по два. Увеличиваю по два. Нам важно, чтобы мы их зарисовали. Первые два. Запишите название и зарисуйте. Это вот эти специальные операции. и виды сдвигов, которые используются при этих сложных операциях, о которых мы с вами сказали. Операция умножения простая, а операции умножения и деления более сложные и используются Ну, значит, что мы с вами видим? Мы видим две схемы. Единственное, вот здесь в правом столбике у нас опечатка. Запишите. У нас на этой схеме есть обозначения. Видите? МСП и ЛСП. Два битика. Один из них младший, второй из них старший бит. Младший бит. Он у нас где? Справа. Вот этот ЛСП. Переводится он у нас как? младший бит, да, или лест, да, синк бит, ну и, соответственно, старший это мост, да, мост, синк бит, мсб. Вот, значит, они определяют у нас, что, порядок, да, следования битов, вот, в некотором целом числе, да. можем с вами посмотреть да значит это у нас число до 0 0 0 10 111 вот значит что мы с вами видим да что значит если да имеется некое число в случае арифметического сдвига И если осуществляется арифметический сблик, то есть поступает нолик, то происходит преобразование. И вот эти квадратики, вот эти битики, которые у нас были наверху, они у нас что? Переезжают, перемещаются в соответствии с направлением стрелочки, справа налево и вниз и в результате скажите мне вот бит с названием lsb старый он у нас был с значением единичка сколько вот будет lsb после сдвига чему будет равно значит вот это lsb вот этот бит бит lsb после сдвига правил в следующем цикле да значит поступил нолик да все эти цифры единички уехали у нас налево да и в результате после выполнения вот этого арифметического сдвига налево у нас что у нас в качестве лсб будет Посмотрите, примерчик логического сдвига. Что-нибудь изменяется там у нас или нет? Совершенно верно. При сдвиге налево в случае логического сдвига у нас никаких изменений нет. И мы с вами видим, что вот эти пятики у нас просто что переезжают. Переезжают, да, на одну позицию налево. На одну позицию налево, да. Так, что вот за такой алгоритм вращения налево? Что у нас происходит с состоянием регистра, да? Это ниже? Да. Мы идем вниз, да. Мы идем пока с вами вниз. Не видно. А, не видно. Ой, я же на самом деле. Точно. Подвал. Да, наш подвал. Логический стрижда. Вот, вращение, да. Вращение, да. Так, ну вот, посмотрите. есть, но никаких данных из вне не поступает. Видите, в прошлом случае у нас поступал из вне некий нолик, а здесь никакого нолика нет. Значит, что же у нас здесь вот осуществляется? Посмотрите, значит, вот все битики Значит, сдвигается точно так же, да? Точно так же. А что происходит с МСБ? А МСБ у нас едет, да? С позиции МСБ и приезжает в позицию какую? ЛСБ. Да, ЛСБ. Ясно, да? ЛСБ. И вот когда вы будете делать лабораторную, там, по-моему, номер 6, да? Номер 6, вот там. в одной из них именно вот так вот по циклу у вас идет вот этот вот сдвиг. Каждая операция сдвигает один питик слева направо или там справа налево. Вот. Так. Ну, значит, здесь мы, значит, это дело видим, да? Здесь мы с вами видим. Так. Ну, Что еще? Вот следующий примерчик. Видите, чем отличается следующий пример? Мы с вами видим, что появился некий битик с именем C. Видите, он появился. То есть, есть некая информация, которая записывается вот в этот бит lsb значит он у нас вот этот lsb он у нас уезжает в позицию что номер условно говоря 2 видите стрелочка от 0 уезжает вниз направо lsb а вот lsb у нас освобождается становится у нас как бы чистеньким. То есть стрелочка, вот эта обратная, она приходит не в ЛСБ, а приходит куда? Приходит в некую позицию до ЛСБ. Видите, да? То есть появляется некое дополнительное поле индикации, да? Вот этот, условно говоря, витек с именем С. И вот с этого поля С попадает на следующем этапе в поле ЛСБ. А вот из поля МСБ попадает куда? Попадает в С. Вот такая сложная схемка. Это были все сдвиги налево. Все сдвиги были налево. Посмотрим сдвиги направо. Специальные арифметические операции с раздвигом направо. Возвращаемся наверх. Давайте смотреть. Движение идет несколько другое. начальное видите значит вот у нас там число число оно несколько отличается да вот числа значит арифметического двига которым у нас было примерчики первым появилась у нас в мс вы единичка вот ну и что мы с вами здесь видим что вот раз мы с вами сдвигаем направо то битику lsb место не осталось. Видите, да? В lsb у нас этот бит никаким образом в операции не участвует. Остальное все сдвигается направо. Ну а msb у нас здесь повторяется, дублируется. Вот этот битик у нас здесь дублируется. значит реализация его осуществляется у нас видите под влиянием неких поступающих данных опять извне опять поступает у нас внизу вы видите нолик да нолик извне вот этот нолик у нас попадает значит вот на позицию мсб узлов на вот и в этом что большая разница разница между сдвигом налево и сдвигом направо. Вы видите, что они немножечко, даже не немножечко, а отличаются. То есть вот здесь алгоритм логического сдвига, он уже другой. Но одинаковое в чем? Одинаково в том, что опять LSB, первоначальное значение а вместо нового lsb используется бит в позиции 1 единичка смещается в lsb msb смещается в шестерку остальные идут параллельно а в позицию msb поступают данные извне ну вот это тоже нужно учесть так ну идем дальше теперь значит вращение вращение скажите вот это операция напоминает То есть, вращение у нас что налево, что направо, очень даже похоже, идентично. Видите? Давайте сравним. Вот у нас слева было. В LSB пришло данные, которые были где? В LSB пришло то, что было где? В MSB. Слева. Смотрим вращение, которое слева. Вращение, которое слева. значит мы видим что в лсб в лсб приходит да приходят данные которые были где в мсб да так а здесь как вот видите как значит зеркальное отображение видите значит там у нас в лсб приходило то что было в мсб а тут на в мсб пришло то что было в лсб а все остальное что изменяется как ну вот смотрим да из позиции 1 там ушло в позицию 2 а здесь как из позиции 1 ушло что в позицию 0 видите вот в этом как бы разница да и когда вы делаете вот эти операции там да в дебагере, сдвиге, да, вот эти все. Вот здесь вам вот эта схемочка, она вам поможет, да, чтобы не ошибиться вот в этих байтиках, то есть вот эта подсказочка. Так, ну и заключительная, да, мы с вами видим операцию поворота, да, или же переворота. Так, ну, Давайте проанализируем. Отличается она или нет? Мы с вами что здесь видим? Что тоже появилась дополнительная позиция. Вот этот вот условный Btec-C. Он тоже здесь есть. Естественно, что данные из ВМСВ и ВЛСВ есть. Ничего извне, особенно у нас не примут. данные, значит, в прошлом случае с вот этой позиции С данные поступали в ЛСБ, да, ну а здесь осуществляется что? обратная операция, данные из С поступают в ЛСБ, вот, значит, ну, а далее, значит, все так же, да, все аналогично, Значит, только что битики у нас идут уже не справа налево, а наоборот слева направо, то есть с более верхнего регистрика вот этого условного семерочки идет, шестерочку, и так далее. И так далее они и сдвигаются. Значит, вот использование, да, вот этих битовых операций позволяет реализовать более сложные операции, о которых мы с вами сказали выше. И вот теперь давайте их запишем, более сложные операции. Запишите. Операция сложения. Операция сложения. Значит, как она реализуется? Вот, если вы помните, там у нас были регистры, да? Вот эти вот, А, В и У, да? Регистр у нас там вот был, да? А, В и внизу был У. Ну и, значит, сложение, да? Сложение регистрализуется. Значит, А, В у нас суммируются, да? Сумма появляется в У. Сумма появляется в У. И, что самое важное, подчеркните, появляется индекс переноса. Появляется индекс, то есть в специальном регистре появляется индекс переноса. Да, это как бы операция, основанная на сдвигах. Вот эти сдвиги и соответственно индикация регистров переноса. Так, сложение. Причем сложение не простое. Сложение не простое, а сложение с переносом. Сложение с переносом. А, Б и перенос суммируются. А, Б и признак переноса суммируются. А сумма появляется в игреке. Значит, операция сложения с переносом. Значит, используется состояние А, Б и перенос. И вот они все три, все эти три элемента суммируется, а разница появляется в игреке и также индикаторе переноса. Таким образом, вот этот вот функция переноса фактически да она у нас работает как функция заимствования заимствования то есть это индикатор что что-то где-то было взято значит это же операция это же значит может быть применена, да, в случаях вычитания, заимствования. Ну, и рассмотрим, значит, вот эти операции. Значит, операция... Сколько осталось? Ну, давайте последнюю запишем, и все. Значит, операция вычитания. Простого, да, операция вычитания, да. Значит, B вычитается из A. то есть вот у нас там были регистры AX и BX. Значит, если вы вычитаете, то вы что? Первое записываете в AX, второе в BX, и вот это вот то, что BX, да, будет у нас что? Вычитаться, да? Значит, B вычитается из A, и разница появляется на Y и переносе. Значит, эта же операция может быть использована для сравнения величин А и В. То есть, операция вычитания может быть использована для сравнения. Для сравнения А и В. Ну, соответственно, если у нас индуцируется знак переноса, значит, второе меньше первого. Или же наоборот. Так, наверное, все. Достаточно.
